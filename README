# -*- mode: org -*-
# Copyright 2025 J. David Taylor
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#   1. Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
# 
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
# 
#   3. Neither the name of the copyright holder nor the names of its
#      contributors may be used to endorse or promote products derived from this
#      software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#+TITLE: A JSON Readtable for Common Lisp
#+AUTHOR: J. David Taylor

* Usage Example:
#+BEGIN_SRC lisp
  CL-USER> (asdf:load-system "json-readtable")
  => T

  CL-USER> (use-package :json-readtable)
  => T

  CL-USER> (let ((*readtable* *json-readtable*))
             (gethash
              "Hello, World!"
              (read-from-string "{\"Hello, World!\": [3.14, true, false, null]}")))
  => #(3.14 T NIL :NULL)

  CL-USER> (with-json-readtable (:object :plist
                                 :array :list
                                 :true "apple"
                                 :false "banana"
                                 :null 'yum)
             (read-from-string "{\"Hello, World!\": [3.14, true, false, null]}"))
  => ("Hello, World!" (3.14 "apple" "banana" YUM))
  => 44
#+END_SRC

* Embedding of JSON values in Common Lisp
- Set ~*JSON-OBJECT*~ to ~:HASH-TABLE~ (default), ~:ALIST~, or ~:PLIST~
- Set ~*JSON-ARRAY*~ to ~:VECTOR~ (default) or ~:LIST~
- Set ~*JSON-TRUE*~, ~*JSON-FALSE*~, ~*JSON-NULL*~ to your desired values.

* Known bugs and implementation constraints
- If the first non-whitespace char of a stream is not ASCII, behavior is
  implementation dependent.  It's reasonable to check that
  #+BEGIN_SRC lisp
    (FIND (PEEK-CHAR T STREAM NIL NIL NIL) "{[\"-0123456789tfn")
  #+END_SRC
  is true before a top-level read.
- We assume host implements ~CL:CHAR-CODE~ and ~CL:CODE-CHAR~ using Unicode code
  points.
- This library may trigger bugs in Slime or Sly due to readtable conflicts.
- This code was developed on SBCL and may have issues on untested
  implementations.
